package com.sist.temp2;
/*
 *     자바 정리 => 웹관련
 *     ---------------
 *     1) 변수  25페이지
 *        -----------------------------------------------------
 *                          메모리에 저장되는 시점     사용범위
 *                          초기화되는 시점 
 *        -----------------------------------------------------
 *        멤버변수             메모리할당
 *        (인스턴스 변수)       new를 사용
 *                           Class.forName()
 *          Class ClassName{
 *              [접근지정어] 데이터형 변수명
 *              --------- 데이터 보호를 목적으로 은닉화
 *                        접근지정어는 보통 private
 *                        
 *          }
 *          변수 => 메모리에 저장 / 메모리에서 읽기
 *                 ---------   ------------
 *                 쓰기          읽기
 *                 ----------------
 *                 Getter / setter
 *          => 사용법
 *             클래스 객체명 = new 클래스명();
 *             객체명.변수명
 *             ----------
 *             객체 = 인스턴스 => 동일 개념인
 *        ----------------------------------------------------
 *        정적변수             컴파일러가 컴파일 
 *        (공유변수, 클래스변수)  JVM이 클래스 읽기
 *                           => 메모리 할당이 자동 
 *                           
 *           => 메모리 할당 없이 사용이 가능
 *           => 클래스명.변수명
 *           => 여러명이 같은 변수를 이용할 때 주로 사용
 *              ------------------------------
 *              웹 => 로고, 이미지 정보...
 *              서버 => 클라이언트 정보(IP)
 *              오라클 (MySQL => 데이터베이스) =>  공유(저장된 데이터는 static )
 *        ----------------------------------------------------
 *        지역변수 (25page)    ==> 메소드가 호출될 때 메소드안에서만 사용이 가능 
 *        변수 : 한개의 데이터를 저장하는 공간
 *        우선 -> 벼눗명이 동일할 때 우선순위
 *        => 지역변수 , 매개변수
 *           ------반드시 초기화 해야함
 *                      ---- 1) 명시적인 초기화
 *                           2) 입력값을 받은 경우
 *                               getParameter() : 웹
 *                           3) 난수 발생 (임의로)
 *        ----------------------------------------------------
 *        메모리 공간에 저장 -> 종류 (데이터형)
 *        
 *        => 변수(70%) => 제어쿤 , 연산자
 *        ----------------------------------------------------
 *          정수형 
 *                byte : 네트워크 통신, 파일 입출력 , 웹
 *                       ASC코드를 주로 사용(char : 1byte)
 *                       한글 => 멀티바이트(char : 2byte) -> Unicode
 *                              => UTF - 8;
 *                       => 사용범위 -> -129 ~127
 *               웹 프로그래머 : 자바 (80) 오라클(20)
 *               웹 브라우저   <=======>   오라클
 *                         연결이 안됨 
 *                   |                   |
 *                사용자 화면 출력         화면 출력 데이터 저장 : 
 *               
 *               웹브라우저  <=====> 프로그램 언어(자바, c , c# python..)
 *                         연결 
 *               오라클    <=====>  자바 
 *                         연결 
 *               자격조건 : 스프링 가능자 , 오라클 가능자
 *                        ---------- 자바 포함(스프링은 자바의 라이브러리)
 *                        => 어노테이션 , 디자인 패턴, XML파싱
 *                        => 스프링(5,6 => 프레임워크 / 부트)
 *               int : default -> 컴퓨터에서 인식 숫자(int 인식)
 *               => 가장 많이 사용되는 정수형
 *               => 웹/윈도우는 정수를 인식하지 못한다.(문자열)
 *                  => 정수 변환 : Integer.parseInt("10")
 *               => 사용범위 : -21 ~ 21
 *               
 *               long : 빅데이터, 금융권, 회계(국세청)
 *                   => -2^63 ~ 2^63
 *               
 *        ----------------------------------------------------
 *          실수형 :
 *             double : 소수점 15 자리 이상 사용
 *             => 컴퓨터 인식은 실수일 경우(default)
 *        ----------------------------------------------------
 *          논리형 : true / false 저장 => 조건문 제어문에 사용
 *        ----------------------------------------------------
 *         문자형 : char(2byte) -=> unicode
 *                문자표현이 많아 -> 각국의 언어 사용이 가능
 *                한글은 1글자 2char
 *                운영체제 호환이 가능
 *                => 문자열을 여러개 모아서 저장 -> 문자열
 *        ----------------------------------------------------
 *          참조형 : 주소를 이용해서 데이터를 관리
 *             배열 => 같은 데이터형만 저장이 가능 
 *             클래스 : 다른 데이터형을 저장이 가능 
 *        ----------------------------------------------------
 *        
 *         기본형의 크기
 *           byte < int < long < double => 형볍ㄴ환
 *          boolean은 제외
 *          => 수표현에 따라 크기가 달라진다.
 *          ------------------------------30 페이지
 *          
 *          변수 생성 방법 (식별자) => 같은 메소드 상에서는 같은 면수가 존재하지 않는다.
 *          = 식별자
 *             1) 알파벳 / 한글 사용 가능 (대소문자 구분)
 *             2) 숫자 사용이 가능( 앞에사용금지)
 *             3) 특수문자사용(_, $)
 *             4) 키워드는 사용불가(메소드명, 클래스명은 키워드가 아니다.)
 *             5) 변수에 공백이 없다.
 *             
 *             ----------------------------------------------- 오라클 자바스크립트에서도 동일
 *               변수 ( 오랔르 -> 컬럼) ,(자바스크립트 -> 자동지정변수)
 *                                    ------- ES6 => let, const
 *                                         let a =10;
 *                                         let a = 10.6
 *                                         const = > final
 *                                         
 *             ----------------------------------------------------
 *             => 약속사항 : 클래스명은 대문자로 시작
 *                         ------- 인터페이스 포함
 *                       메소드명 변수명은 소문자로 시작
 *                       두개이상의 단어로 만든느 경우   -> 두번째 단어는 첫자를 대문자로한다.(헝가리안 표기법)
 *                       
 *                       예) FileName
 *                          File_Name
 *                          
 *                          => _ 로 시작하는 클래스 변수 메소드는 임시변
 *             ----------------------------------------------------
 *             38 페이지 연산자 , 메소드
 *             --------------------
 *             자바에서 지원하는 연산자 (피연산자 / 연산자)
 *             단항 연산 : 피연산자가 하나일때
 *                       증감연산자 (++, --)
 *                         전위,후위연산자
 *                         ----------------연산순서
 *                       부정 연산자
 *                       형변환 연산자
 *             이항 연산자
 *             삼항연산자 
 *           
 *           -------------------------------------------------------------------
 *           
 *           제어문 => 54페이지
 *           
 *           자바에서 제공하는 제어문
 *           -----------------
 *           -> 프로그램에 따라 소스를 건너뛸 수도 있고 -> 반복수행 -> 제어
 *           
 *           -> 
 *              조건문 
 *               단일 조건문 : 독립적 수행문장(조건마다 따로 수행)
 *               형식)
 *                 if(조건문) ==> 부정연산자, 눈리연산자,비교연산자
 *                    조건 -> 참일때만 수행하는 문장
 *                    
 *               선택 조건문  : true/false를 나눠서 처리
 *                  if(조건문) {
 *                     true 일때
 *                  }
 *                  else{
 *                     false 일때 
 *                  }
 *                  
 *              반복문 :
 *                    반복횟수가 지정된 경우 ;for 
 *                       => 화면 출력시에 주로 사용 (HTML) = front
 *                    반복횟수가 지정이 안된경우 :  while
 *                       => 파일 읽기 / 데이터베이스(오라클)읽기  	
 *                    
 *                    
 *               
 *              반복제어문
 *              
 *              ====================================================
 *              메소드
 *               ==> 한가지 기능만 수행이 가능 (재사용 목적)
 *               => 반복 수행을 제거
 *               => 구조적인 프로그램을 만들때 사용
 *                   ----------- 단락을 나눠서 처리
 *                   ----------- 에러 처리
 *                   ----------- 수정시에 
 *        		 형식)
 *                  [접근지정어 ][옵션] 리턴형 메소드명(매개변수 목록)
 *                   {
 *                      
 *                   }
 *                   접근지정어는 다른 통신을 담당
 *                   옵션 -> static / abstract (선언부만 사용)
 *                   
 *                   예) 
 *                      리턴형 : 결과값(처리) --> 한개만 사용 
 *                             *** 결과값이 없는 경우에는 void 를 사용한다.
 *                             *** 리턴형으로 사용
 *                                1) 기본 데이터형
 *                                2) 클래스
 *                                3) 배열 
 *                      매개변수 : 사용자 요청값 --> 여러개  사용이 가능
 *                             *** 3개 이상이면 배열, 클래스로 받는다.
 *                      ***** 매개변수는 많이 사용하면 처리하기 어렵다.(최소화)
 *                      
 *                      리턴형 메소드명(매개변수)
 *                      {
 *                         return -> void 일때는 생략이 가능
 *                         return 값 => 값은 리턴형 데이터와 동일하게 만든다. 리턴형이 더 클수도 있다.
 *                      }
 *                      
 *                      
 *         ==============================================================================
 *         메소드 유형
 *         --------------------------------------------------
 *                              리턴형            매개변수
 *         --------------------------------------------------
 *                               O                O  --> oracle -> select -> 클래스 / 컬렉션
 *         --------------------------------------------------
 *                               O                X  --> oracle -> select
 *         --------------------------------------------------
 *                               X                O  --> oracle -> insert update delete
 *                                                       오라클 자체에서 수행 
 *                                   *** -> 추가할 데이터 첨부
 *         --------------------------------------------------
 *                               X                X
 *         --------------------------------------------------
 *         
 *          소스가 많기 때문에 나눠서 처리 할 경우에 주로 사용
 *          --------------------------------------
 *          => 사용자 입력 처리 
 *          => 사용자 요청 처리  
 *          => 사용자 출력 처리 
 *          ---------------
 *          
 *          
 *                             
 *                   
 */
public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
	}

}
