package com.sist.main;
/*
 *    자바 클래스의 구성 => *** 객체지향 특성(접근 지정어, 캡슐화, 재사용 수정 추가)
 *    --------------      public / protected / default / private
 *                        1) 변수 2) 메소드 3) 생성자
 *                        1) 캡슐화 : 데이터 보호 => 모든 변수는 private 
 *                        2) 재사용 : 변셩해서 사용, 있는 그대로 사용
 *                                   상속(is-a)     포함(has-a)
 *                        3) 수정 : 오버라이딩, 추가 : 오버로딩
 *      class ClassName{
 *      
 *      -------------------------
 *      변수
 *      1) 멤버변수 (인스턴스 변수 -> new 메모리에 저장할때 따로 저장되는 변수)
 *         형식)[접근지정어] 데이터형 변수형 = 값 {디폴트값}
 *              int a; => 0(default값)
 *              int a = 10; // 명시적인 초기화
 *              
 *              => int a;
 *                 a = 10; => 구현 => 변수의 초기화(생성자)
 *              => 생성시점 : new를 이용해서 메모리 공간이 확보, 
 *                 소멸시점 객체=null값이거나 사용하지 않는 경우
 *                        ---------- 가비지 컬렉션 (메모리회수)
                => 가장 많이 사용되는 변수(여러개를 저장)
                => 사용하는 방법 
                   class A{
                      int age; //0
                      String name; // null
                   }
                   -------
                   A a = new A(); => age, name
                         ---
                     -- 객체, 인스턴스(메모리에 저장된 상태)
                     => a.age
                     => a.name
                   A b = new A();
                     => b.age
                     => b.name
                  ==========================> class 는 한개만 설계 ==> 저장을 new 를 이용해서 여러개 선언
                     b=a => 저장된 데이터관리 위치가 변경이 될수 있다.(데이터 손실)
                     ========> 메모리 주소의 복구가 어렵다.
                     -a-
                     100  => 100----------
                     ---     ----------age
                                 25
                             ---------name
                                 홍길동
                             -------------
                             -------------    
                     -b-
                     100  =>(X) 200---------- GC
                     ---     ----------age
                                 20
                             ---------name
                                 심청이
                             -------------
                             -------------    
                  
        2) 정적변수(클래스변수, 공유변수) => 한개의 공간만 생성
          => 공유변수 : 오라클 static?
           형식) [접근지정어] static 데이터형 변수명 = 값(디폴트값)
                 int => 0;
                 double => 0.0;
                 boolean => false;
                 String, 배열 ,class => null (주소가 저장이 안된 상태)
                 => 생성시점 : 컴파일러에 의해 자동으로 메모리 저장
                 => new가 없어도 사용이 가능
 *      -------------------------
 *      생성자 : 
 *        1) 객체가 생성될때 호출 메소드
 *            A a = new A();
 *                      --- 생성자
 *        2) 특징
 *           = 클래스명과 동일
 *           = 리턴타입이 없다
 *           = 생성자가 없는 경우에 추가(매개변수가 없는 생성자가 추가)
 *                                 -----------------
 *                                    기본 생성자
 *           = 멤버변수의 초기화
 *           = 생성자는 여러개 사용이 가능 (한개의 클래스)   
 *           = 데이터베이스 연결, 네트워크 연결, 윈도우...           
 *           = 자동추가
 *             ------
 *             import  => java.lang.*
 *                        ----------- String, Math, System... 자동으로 추가
 *             class A extends Object
 *                     -------------- 
 *             생성자 : 기본 생성자()
 *             return : void 경우 생략           
 *           class A{
 *               A(){} ***
 *               void A(){} : 일반 메소드
 *               A(int a){}***
 *               A(int a, int b){}***
 *           }
 *        3) 역할
 *           = 시작과 동시에 처리
 *             예) 자동 로그인
 *                 오라클 연결
 *                 서버 연결...
 *           = 멤버변수의 초기화
 *             class A{
 *                 int a; 
// *                 a =10;
 *                 A(){
 *                    // 파일 읽기 , 크롤링...
 *                    //init() 등등
 *                    = 구현해서 초기화
 *                 }
 *             }
 *             class A{
 *                 int a; 
// *                 a =10;
 *             }
 *             = 필요시마다 사용한다.(생략가능)
 *                               --- 컴파일러에 의해 자동으로 생성
 *      -------------------------
 *      메소드 :
 *        1) 역할 => 다른 클래스  클래스와 통신(연결)
 *        2) 수정, 추가 (오버라이딩, 오버로딩)
 *        3) 반복제거
 *        4) 구조적인 프로그램(단락을 나눠서 처리) => 오류, 수정
 *        5) 메소드는 호출시마다 처음부터 끝까지 
 *        6) 구성 요소
 *           결과값(리턴타입)
 *           => 리턴 타입으로 사용
 *              기본형
 *              int, double ...
 *              배열
 *              int [] double[]....
 *              클래스이용
 *              String, 사용자정의 클래스...
 *              클래스 : 다른 데이터형 여러개.. 배열로 사용이 가능
 *              => 기본형 (자바에서 지원 => 지원하지 않는 것이 많다)
 *                 프로그래머가 만들어서 처리 => 클래스
 *              => 클래스의 첫번째 기능 => 사용자 정의 데이터형
 *                 ---- 형변환 , 대입 ... (기본형과 동일하게 사용이 가능)
 *           메소드명 : 식별자 => 변수, 클래스, 인터페이스, 메소드
 *                    => 변수, 메소드는 소문자
 *                    => 클래스, 인터페이스는 대문자
 *                    => 문자길이는 상관없다.(3 ~ 10) =>7
 *                    => 내용이 유추가능한 명칭을 써야한다.
 *                    => 한글은 가급적 사용하지 않는다.
 *                    
 *           매개변수(사용자 요청)
 *           *** 사용자의 요청값을 받아서 요청 처리 결과를 도출
 *           *** 최소화 시킨다.(3개 이상이면 -> 배열, 클래스)
 *           예) 
 *             정수 10개를 보내주고 정렬후 달라
 *             (int a, int b, ... (x) -> int[] arr)
 *             회원가입
 *             (String id, String pwd, String name...String addr ..)
 *             (Member m) 클래스
 *             
 *             
 *           메소드 유형
 *            => 리턴타입 (없거나, 한개만 존재) => 여러개 일때 배열, 
 *            => 매개변수 (없거나, 한개 이상)
 *          -------------------
 *            리턴타입 매개변수
 *          -------------------
 *             0       0       => 가장 많이 사용
 *             자바자체에서 처리 / 자바 => 데이터를 브라우저
 *          -------------------
 *             0       x       
 *          -------------------
 *             x       0       
 *          -------------------   
 *             x       x       
 *          -------------------
 *          
 *      -------------------------
 *         메소드 형식
 *         [접근지정어][옵션]리턴타입 메소드명(매개변수...){ 선언부
 *             옵션 : static , abstract, final
 *             구현부
 *             연산/ 제어
 *             return 값 => void 인 경우에는 생략가능 
 *         }
 *         
 *         
 *      
 *      }                  
 */
class A{
	//A(){} -> 구현이 없으면 안써도 됨
}


public class 생성자_1{
	// 사실 생성자가 자동으로 추가되어 있음
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		생성자_1 a = new 생성자_1();
		System.out.println(a.toString());
		
	}

}
